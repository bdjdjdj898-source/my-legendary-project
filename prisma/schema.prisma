generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  telegramId  String   @unique
  username    String?
  firstName   String?
  lastName    String?
  avatarUrl   String?
  role        String   @default("user") // "user" | "admin"
  isBanned    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders      Order[]
  cart        Cart?

  @@map("users")
}

model Product {
  id          Int      @id @default(autoincrement())
  title       String
  brand       String
  category    String   // "Куртки" | "Толстовки" | "Джинсы" | "Аксессуары" | "Обувь" | "Свитеры"
  size        String
  color       String
  condition   Int      // 1-10 шкала состояния
  description String
  price       Float
  images      Json     // JSON массив URL изображений
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cartItems   CartItem[]
  orderItems  OrderItem[]

  // Indexes for scalability
  @@index([category])
  @@index([brand])
  @@index([price])
  @@index([createdAt])

  @@map("products")
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  
  @@map("carts")
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int     @default(1)
  createdAt DateTime @default(now())
  
  // Relations
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id            Int      @id @default(autoincrement())
  userId        Int
  status        String   @default("pending") // "pending" | "confirmed" | "shipped" | "delivered" | "cancelled"
  totalAmount   Float
  shippingInfo  String?  // JSON с адресом доставки
  telegramData  String?  // Дополнительные данные из Telegram WebApp
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         OrderItem[]

  // Indexes for scalability
  @@index([userId])
  @@index([status])
  @@index([createdAt])

  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float   // Цена на момент заказа
  
  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("order_items")
}