import React, { createContext, useContext, useEffect, useState } from 'react';
import { initTelegramWebApp } from '../utils/telegram';
import { setTelegramInitData, apiFetch } from '../api/client';
import { User } from '../types/api';

interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code?: string;
  is_premium?: boolean;
}

interface AuthContextType {
  user: User | null;
  telegramUser: TelegramUser | null;
  initData: string | null;
  isLoading: boolean;
  error: string | null;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [telegramUser, setTelegramUser] = useState<TelegramUser | null>(null);
  const [initData, setInitData] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const initializeAuth = async () => {
      try {
        const isMockMode = import.meta.env.VITE_MOCK_TELEGRAM === 'true';

        if (import.meta.env.DEV) {
          console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
          console.log('üé≠ Mock —Ä–µ–∂–∏–º:', isMockMode);
        }

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã Telegram SDK —É—Å–ø–µ–ª –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è (–µ—Å–ª–∏ –Ω–µ mock)
        if (!isMockMode) {
          await new Promise(resolve => setTimeout(resolve, 100));
        }

        // Initialize Telegram WebApp
        const telegramData = initTelegramWebApp();
        if (import.meta.env.DEV) {
          console.log('üì± –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram:', telegramData);
        }

        if (telegramData?.initData && telegramData?.user) {
          if (import.meta.env.DEV) {
            console.log('‚úÖ Telegram –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
          }
          setInitData(telegramData.initData);
          setTelegramUser(telegramData.user);
          setTelegramInitData(telegramData.initData);
          if (import.meta.env.DEV) {
            console.log('üë§ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', telegramData.user);
          }

          // Fetch user profile from backend
          try {
            if (import.meta.env.DEV) {
              console.log('üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞...');
            }
            const response = await apiFetch('/api/me');
            if (import.meta.env.DEV) {
              console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
            }

            if (response.success) {
              setUser(response.data);
              if (import.meta.env.DEV) {
                console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω:', response.data);
              }
            } else {
              console.error('‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', response);

              // –í dev —Ä–µ–∂–∏–º–µ —Å mock –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–µ–º fallback user
              if (isMockMode) {
                console.log('üé≠ Dev —Ä–µ–∂–∏–º: —Å–æ–∑–¥–∞–µ–º fallback user –∏–∑ telegramUser');
                const fallbackUser: User = {
                  id: telegramData.user.id,
                  telegramId: telegramData.user.id,
                  firstName: telegramData.user.first_name,
                  lastName: telegramData.user.last_name || '',
                  username: telegramData.user.username || '',
                  role: 'user',
                  createdAt: new Date().toISOString(),
                  updatedAt: new Date().toISOString()
                } as User;
                setUser(fallbackUser);
                console.log('‚úÖ Fallback user —Å–æ–∑–¥–∞–Ω:', fallbackUser);
              } else {
                setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
              }
            }
          } catch (apiError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞:', apiError);

            // –í dev —Ä–µ–∂–∏–º–µ —Å mock –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–µ–º fallback user
            if (isMockMode) {
              console.log('üé≠ Dev —Ä–µ–∂–∏–º: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º fallback user');
              const fallbackUser: User = {
                id: telegramData.user.id,
                telegramId: telegramData.user.id,
                firstName: telegramData.user.first_name,
                lastName: telegramData.user.last_name || '',
                username: telegramData.user.username || '',
                role: 'user',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
              } as User;
              setUser(fallbackUser);
              console.log('‚úÖ Fallback user —Å–æ–∑–¥–∞–Ω:', fallbackUser);
            } else {
              setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }
          }
        } else {
          console.log('‚ö†Ô∏è Telegram –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - —Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Å–∞–π—Ç');
          if (import.meta.env.DEV) {
            console.log('üåç window.Telegram:', (window as any).Telegram);
            console.log('üì± window.Telegram?.WebApp:', (window as any).Telegram?.WebApp);
          }

          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É - –ø—Ä–æ—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã
        }
      } catch (err) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:', err);
        const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        console.log('–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', errorMessage);

        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
      } finally {
        if (import.meta.env.DEV) {
          console.log('üèÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, isLoading = false');
        }
        setIsLoading(false);
      }
    };

    initializeAuth();
  }, []);

  const value = {
    user,
    telegramUser,
    initData,
    isLoading,
    error
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};