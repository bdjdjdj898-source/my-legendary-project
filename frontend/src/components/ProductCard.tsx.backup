import React, { useRef, useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Heart } from 'lucide-react';
import { formatCurrency } from '../utils/format';
import { apiFetch } from '../api/client';
import { useAuth } from '../contexts/AuthContext';
import type { Product } from '../types/api';
import { addDebugLog } from './DebugLog';

interface ProductCardProps {
  product: Product;
  onClick?: (product: Product) => void;
  onFavoriteChange?: (productId: number) => void;
}

const ProductCard: React.FC<ProductCardProps> = ({ product, onClick, onFavoriteChange }) => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const { images, brand, title, price, id } = product;
  const [index, setIndex] = useState(0);
  const [isFavorite, setIsFavorite] = useState(false);
  const [isFavoriteLoading, setIsFavoriteLoading] = useState(false);
  const trackRef = useRef<HTMLDivElement | null>(null);
  const dotsContainerRef = useRef<HTMLDivElement | null>(null);

  // Parallax indicators config
  const maxVisibleDots = 4;
  const totalImages = images.length;

  // Swipe state - discrete model (1 swipe = ±1 index)
  const startXRef = useRef<number>(0);
  const startYRef = useRef<number>(0);
  const currentXRef = useRef<number>(0);
  const currentYRef = useRef<number>(0);
  const isDraggingRef = useRef(false);
  const gestureDetectedRef = useRef<'horizontal' | 'vertical' | null>(null);
  const widthRef = useRef<number>(0);
  const activePointerIdRef = useRef<number | null>(null);
  const suppressClickRef = useRef<boolean>(false);

  // Gesture detection thresholds
  const MIN_SWIPE_DISTANCE = 30; // px - минимальное горизонтальное движение для свайпа
  const HORIZONTAL_RATIO = 2.5; // |Δx| / |Δy| > 2.5 для горизонтального свайпа
  const SWIPE_DURATION = 250; // ms - длительность анимации перелистывания
  const PARALLAX_DURATION = 300; // ms - длительность анимации индикаторов (1.2x slower)
  const SPRING_EASING = 'cubic-bezier(0.34, 1.56, 0.64, 1)';

  // Helper: update visual transforms from progress
  const updateTransforms = (targetIndex: number, dragOffsetPercent: number = 0) => {
    if (!trackRef.current || !dotsContainerRef.current) return;

    // Track transform - CRITICAL FIX:
    // Track is flex with items that are each 100% width
    // So track's real width = totalImages * 100%
    // We position at -index * 100% (each slide position)
    // During drag, add dragOffsetPercent to show fractional movement
    const trackOffset = targetIndex * 100 + dragOffsetPercent;
    trackRef.current.style.transform = `translateX(${-trackOffset}%)`;

    // Calculate effective progress for dots (includes drag offset)
    const effectiveProgress = targetIndex + (dragOffsetPercent / 100);

    // Windowed parallax for indicators (pablo.msk style)
    // The dots container only starts scrolling when active dot would leave the 4-dot viewport
    const dotWidth = 14;
    const halfWindow = maxVisibleDots / 2;

    // Calculate when container should start moving
    let dotsOffset = 0;
    if (totalImages > maxVisibleDots) {
      // Container starts moving when progress exceeds window bounds
      const windowStart = halfWindow - 0.5;
      const windowEnd = totalImages - halfWindow - 0.5;

      if (effectiveProgress > windowStart) {
        // Apply parallax slowdown coefficient (0.6 = 60% speed vs track)
        const scrollProgress = Math.min(effectiveProgress - windowStart, windowEnd - windowStart);
        dotsOffset = scrollProgress * dotWidth * 0.6; // Parallax coefficient
      }

      // Clamp to valid range
      const maxOffset = (totalImages - maxVisibleDots) * dotWidth;
      dotsOffset = Math.max(0, Math.min(maxOffset, dotsOffset));
    }

    dotsContainerRef.current.style.transform = `translateX(${-dotsOffset}px)`;
  };

  function handlePointerDown(e: React.PointerEvent) {
    const el = trackRef.current;
    if (!el) return;

    // Multi-touch protection: ignore if already dragging with another pointer
    if (isDraggingRef.current && activePointerIdRef.current !== null) return;

    // Cancel any pending animation timeouts from previous drag
    if (animationTimeoutRef.current) {
      clearTimeout(animationTimeoutRef.current);
      animationTimeoutRef.current = null;
    }

    // CRITICAL: Cancel transitions immediately on touch
    el.style.transition = 'none';
    if (dotsContainerRef.current) {
      dotsContainerRef.current.style.transition = 'none';
    }

    // Force reflow to ensure transition is removed before drag starts
    void el.offsetHeight;

    // Recalculate width on every drag start (handles dynamic layout changes)
    widthRef.current = el.clientWidth;
    startXRef.current = e.clientX;
    startYRef.current = e.clientY;
    currentXRef.current = e.clientX;
    currentYRef.current = e.clientY;
    lastXRef.current = e.clientX;
    lastTimeRef.current = Date.now();
    velocityRef.current = 0;
    isDraggingRef.current = true;
    gestureDetectedRef.current = null;
    activePointerIdRef.current = e.pointerId;
    progressRef.current = index; // Initialize from current index

    try {
      (e.target as Element).setPointerCapture(e.pointerId);
    } catch (err) {
      // Capture might fail on some browsers
      console.warn('Failed to set pointer capture:', err);
    }
  }

  function handlePointerMove(e: React.PointerEvent) {
    if (!isDraggingRef.current || !trackRef.current) return;

    // Ignore events from other pointers
    if (e.pointerId !== activePointerIdRef.current) return;

    currentXRef.current = e.clientX;
    currentYRef.current = e.clientY;

    const deltaX = currentXRef.current - startXRef.current;
    const deltaY = currentYRef.current - startYRef.current;

    // Gesture detection - only on first significant movement
    if (gestureDetectedRef.current === null) {
      const absDeltaX = Math.abs(deltaX);
      const absDeltaY = Math.abs(deltaY);

      if (absDeltaX > 10 || absDeltaY > 10) {
        const ratio = absDeltaX / Math.max(absDeltaY, 1);
        gestureDetectedRef.current = ratio > 3 ? 'horizontal' : 'vertical';

        // Only preventDefault AFTER gesture confirmed
        if (gestureDetectedRef.current === 'horizontal') {
          e.preventDefault();
          e.stopPropagation();
        }
      } else {
        return; // Not enough movement yet
      }
    }

    // Vertical gesture - allow page scroll
    if (gestureDetectedRef.current === 'vertical') {
      isDraggingRef.current = false;
      return;
    }

    // Horizontal gesture confirmed
    if (gestureDetectedRef.current === 'horizontal') {
      e.preventDefault();
      e.stopPropagation();

      // Calculate velocity (pixels per second, normalized)
      const now = Date.now();
      const dt = now - lastTimeRef.current;
      // Filter noisy measurements on high-refresh displays (>60Hz)
      if (dt > 16) {
        const deltaMove = currentXRef.current - lastXRef.current;
        const instantVelocity = (deltaMove / dt) * 1000; // Convert to px/sec

        // Apply EMA (Exponential Moving Average) smoothing - alpha = 0.3
        velocityRef.current = 0.3 * instantVelocity + 0.7 * velocityRef.current;
      }
      lastXRef.current = currentXRef.current;
      lastTimeRef.current = now;

      // Calculate drag offset as percentage of viewport width
      // dragOffsetPercent represents how far we've dragged relative to current slide
      let dragOffsetPercent = (-deltaX / widthRef.current) * 100;

      // Calculate target index and apply rubber band at boundaries
      const maxIndex = totalImages - 1;
      let targetIndex = index;
      let effectiveDragPercent = dragOffsetPercent;

      // Determine target index based on drag direction
      if (dragOffsetPercent > 50 && index > 0) {
        // Dragging right past 50% - go to previous slide
        targetIndex = index - 1;
        effectiveDragPercent = dragOffsetPercent - 100; // Relative to new target
      } else if (dragOffsetPercent < -50 && index < maxIndex) {
        // Dragging left past 50% - go to next slide
        targetIndex = index + 1;
        effectiveDragPercent = dragOffsetPercent + 100; // Relative to new target
      }

      // Apply rubber band resistance at boundaries
      if (index === 0 && dragOffsetPercent > 0) {
        // At first image, dragging right - apply resistance
        const excess = dragOffsetPercent / 100;
        effectiveDragPercent = Math.pow(excess, 0.7) * 40; // Non-linear resistance (40% max)
      } else if (index === maxIndex && dragOffsetPercent < 0) {
        // At last image, dragging left - apply resistance
        const excess = -dragOffsetPercent / 100;
        effectiveDragPercent = -Math.pow(excess, 0.7) * 40;
      }

      // Store progress for physics calculations
      progressRef.current = index + (effectiveDragPercent / 100);

      // Deduplicate rAF: cancel previous frame request
      if (rafIdRef.current !== null) {
        cancelAnimationFrame(rafIdRef.current);
      }

      // Update all visuals from current index + drag offset
      rafIdRef.current = requestAnimationFrame(() => {
        updateTransforms(index, effectiveDragPercent);
        rafIdRef.current = null;
      });
    }
  }

  function handlePointerUp(e: React.PointerEvent) {
    if (!isDraggingRef.current) return;

    // Ignore events from other pointers
    if (e.pointerId !== activePointerIdRef.current) return;

    const deltaX = currentXRef.current - startXRef.current;
    const velocity = velocityRef.current; // px/sec
    const wasHorizontalGesture = gestureDetectedRef.current === 'horizontal';

    isDraggingRef.current = false;
    gestureDetectedRef.current = null;
    activePointerIdRef.current = null;

    // Release pointer capture
    try {
      (e.target as Element).releasePointerCapture(e.pointerId);
    } catch (err) {
      // Ignore if capture was already released
    }

    // If not horizontal gesture, treat as tap
    if (!wasHorizontalGesture) {
      if (Math.abs(deltaX) < 6) {
        suppressClickRef.current = false; // Allow click
        if (onClick) {
          onClick(product);
        } else {
          navigate(`/product/${id}`);
        }
      }
      return;
    }

    // Horizontal gesture - suppress click if dragged significantly
    if (Math.abs(deltaX) > 10) {
      suppressClickRef.current = true;
      setTimeout(() => {
        suppressClickRef.current = false;
      }, 300);
    }

    // Calculate target index with physics-based inertia
    const width = widthRef.current;
    const normalizedVelocity = velocity / width; // velocity as fraction of width per second

    // Thresholds
    const distanceThreshold = 0.25; // 25% of width
    const velocityThreshold = 1.2; // 1.2x width per second (fast swipe)

    let targetIndex = Math.round(progressRef.current); // Start with nearest

    // Strong velocity overrides position
    if (Math.abs(normalizedVelocity) > velocityThreshold) {
      if (normalizedVelocity < 0 && index < totalImages - 1) {
        targetIndex = index + 1;
      } else if (normalizedVelocity > 0 && index > 0) {
        targetIndex = index - 1;
      }
    }
    // Otherwise check distance threshold
    else {
      const dragDistance = progressRef.current - index;
      if (Math.abs(dragDistance) > distanceThreshold) {
        if (dragDistance > 0 && index < totalImages - 1) {
          targetIndex = index + 1;
        } else if (dragDistance < 0 && index > 0) {
          targetIndex = index - 1;
        }
      }
    }

    // Clamp to valid range
    targetIndex = Math.max(0, Math.min(totalImages - 1, targetIndex));

    // Calculate animation duration based on distance (physics-based)
    const distance = Math.abs(targetIndex - progressRef.current);
    const duration = Math.min(320, Math.max(180, distance * 280)); // 180-320ms

    // Spring-like easing with slight overshoot (pablo.msk style)
    const springEasing = 'cubic-bezier(0.34, 1.56, 0.64, 1)';

    // Update state first
    if (targetIndex !== index) {
      setIndex(targetIndex);
    }

    // Update progress
    progressRef.current = targetIndex;

    // Apply smooth spring animation to track
    if (trackRef.current) {
      trackRef.current.style.transition = `transform ${duration}ms ${springEasing}`;
    }

    // Indicators animate slower for parallax depth effect (1.2x slower)
    if (dotsContainerRef.current) {
      const dotsDuration = Math.round(duration * 1.2);
      dotsContainerRef.current.style.transition = `transform ${dotsDuration}ms ${springEasing}`;
    }

    // Force reflow before applying transform (ensures transition is active)
    if (trackRef.current) {
      void trackRef.current.offsetHeight;
    }

    // Now apply the transform - transition will animate it
    // No drag offset, animate to exact index position
    updateTransforms(targetIndex, 0);

    // Use transitionend listener instead of setTimeout for reliability
    const handleTransitionEnd = () => {
      if (trackRef.current) trackRef.current.style.transition = 'none';
      if (dotsContainerRef.current) dotsContainerRef.current.style.transition = 'none';
      animationTimeoutRef.current = null;
    };

    // Listen for transition end on track (primary animation)
    if (trackRef.current) {
      trackRef.current.addEventListener('transitionend', handleTransitionEnd, { once: true });
    }

    // Fallback timeout in case transitionend doesn't fire (safety net)
    const dotsDuration = Math.round(duration * 1.2);
    animationTimeoutRef.current = window.setTimeout(() => {
      handleTransitionEnd();
    }, dotsDuration + 50);

    // Reset refs
    velocityRef.current = 0;
  }

  // Handle pointer cancel (incoming call, tab switch, OS gesture)
  function handlePointerCancel(e: React.PointerEvent) {
    if (!isDraggingRef.current) return;
    if (e.pointerId !== activePointerIdRef.current) return;

    // Snap to nearest index (don't complete the gesture)
    const nearestIndex = Math.round(progressRef.current);
    const targetIndex = Math.max(0, Math.min(totalImages - 1, nearestIndex));

    isDraggingRef.current = false;
    gestureDetectedRef.current = null;
    activePointerIdRef.current = null;

    if (targetIndex !== index) {
      setIndex(targetIndex);
    }

    progressRef.current = targetIndex;

    const springEasing = 'cubic-bezier(0.34, 1.56, 0.64, 1)';

    // Animate to nearest position
    if (trackRef.current) {
      trackRef.current.style.transition = `transform 200ms ${springEasing}`;
    }
    if (dotsContainerRef.current) {
      const dotsDuration = 240; // 1.2x slower
      dotsContainerRef.current.style.transition = `transform ${dotsDuration}ms ${springEasing}`;
    }

    // Force reflow
    if (trackRef.current) {
      void trackRef.current.offsetHeight;
    }

    updateTransforms(targetIndex, 0);

    // Use transitionend listener
    const handleTransitionEnd = () => {
      if (trackRef.current) trackRef.current.style.transition = 'none';
      if (dotsContainerRef.current) dotsContainerRef.current.style.transition = 'none';
      animationTimeoutRef.current = null;
    };

    if (trackRef.current) {
      trackRef.current.addEventListener('transitionend', handleTransitionEnd, { once: true });
    }

    // Fallback timeout
    animationTimeoutRef.current = window.setTimeout(handleTransitionEnd, 290);

    velocityRef.current = 0;
  }

  // Update transform when index changes (non-drag) - only on mount
  useEffect(() => {
    if (!trackRef.current) return;

    // Only set initial position, don't interfere with animations
    if (progressRef.current === 0) {
      trackRef.current.style.transform = `translateX(${-index * 100}%)`;
      progressRef.current = index;
    }
  }, [index]);

  // Handle window resize / orientation change
  useEffect(() => {
    const handleResize = () => {
      if (!trackRef.current || isDraggingRef.current) return;

      // Update width and recalculate transforms
      widthRef.current = trackRef.current.clientWidth;
      updateTransforms(index);
    };

    window.addEventListener('resize', handleResize);
    window.addEventListener('orientationchange', handleResize);

    return () => {
      window.removeEventListener('resize', handleResize);
      window.removeEventListener('orientationchange', handleResize);
    };
  }, [index]);

  // Check if product is in favorites
  useEffect(() => {
    if (!user) {
      setIsFavorite(false);
      return;
    }

    const checkFavorite = async () => {
      try {
        const response = await apiFetch('/api/favorites');
        if (response.success) {
          const favoriteIds = response.data.map((item: Product) => item.id);
          const isInFavorites = favoriteIds.includes(id);
          setIsFavorite(isInFavorites);
        }
      } catch (error: any) {
        addDebugLog(`❌ Ошибка проверки избранного: ${error.message || error.status}`, 'error');
      }
    };

    checkFavorite();
  }, [user, id]);

  const handleFavoriteClick = async (e: React.MouseEvent) => {
    e.stopPropagation();

    if (!user) {
      addDebugLog('❌ Нет авторизации', 'error');
      navigate('/profile');
      return;
    }

    if (isFavoriteLoading) return;

    try {
      setIsFavoriteLoading(true);
      addDebugLog(`🔄 ${isFavorite ? 'Удаляем' : 'Добавляем'} из избранного...`, 'info');

      if (isFavorite) {
        await apiFetch(`/api/favorites/${id}`, {
          method: 'DELETE'
        });
        setIsFavorite(false);
        addDebugLog('✅ Удалено из избранного', 'success');
        if (onFavoriteChange) {
          onFavoriteChange(id);
        }
      } else {
        await apiFetch(`/api/favorites/${id}`, {
          method: 'POST'
        });
        setIsFavorite(true);
        addDebugLog('✅ Добавлено в избранное', 'success');
      }
    } catch (error: any) {
      if (error.status === 401) {
        addDebugLog('❌ Нет авторизации Telegram', 'error');
        navigate('/profile');
      } else if (error.status === 404) {
        addDebugLog('❌ Товар не найден', 'error');
      } else if (error.message) {
        addDebugLog(`❌ ${error.message}`, 'error');
      } else {
        addDebugLog(`❌ Ошибка ${error.status}`, 'error');
      }
    } finally {
      setIsFavoriteLoading(false);
    }
  };

  const conditionColor = (condition: number) => {
    if (condition >= 9) return { bg: 'var(--color-success-bg)', text: 'var(--color-success-text)' };
    if (condition >= 7) return { bg: 'var(--color-info-bg)', text: 'var(--color-info-text)' };
    if (condition >= 5) return { bg: 'var(--color-warning-bg)', text: 'var(--color-warning-text)' };
    return { bg: 'var(--color-error-bg)', text: 'var(--color-error-text)' };
  };

  return (
    <article
      className="overflow-hidden transition-all duration-150"
      style={{
        backgroundColor: 'var(--card)',
        borderRadius: '16px',
        boxShadow: '0 2px 8px rgba(0,0,0,0.06)',
      }}
      onMouseEnter={(e) => {
        e.currentTarget.style.boxShadow = '0 4px 16px rgba(0,0,0,0.12)';
        e.currentTarget.style.transform = 'translateY(-2px)';
      }}
      onMouseLeave={(e) => {
        e.currentTarget.style.boxShadow = '0 2px 8px rgba(0,0,0,0.06)';
        e.currentTarget.style.transform = 'translateY(0)';
      }}
    >
      <div
        className="relative w-full overflow-hidden"
        style={{ aspectRatio: '4 / 5', borderRadius: '12px', touchAction: 'pan-y' }}
        onPointerDown={handlePointerDown}
        onPointerMove={handlePointerMove}
        onPointerUp={handlePointerUp}
        onPointerCancel={handlePointerCancel}
        onLostPointerCapture={handlePointerCancel}
      >
        {/* Track */}
        <div
          ref={trackRef}
          className="flex h-full w-full"
          style={{
            transform: `translateX(${-index * 100}%)`,
            willChange: 'transform',
            transitionProperty: 'transform'
          }}
        >
          {images.map((src, i) => (
            <div key={i} className="flex-shrink-0 w-full h-full">
              <img
                src={src}
                loading="lazy"
                decoding="async"
                alt={`${title} — ${i + 1}`}
                className="object-cover w-full h-full"
                onError={(e) => {
                  const target = e.target as HTMLImageElement;
                  target.src = 'https://images.unsplash.com/photo-1441986300917-64674bd600d8?w=800&h=1000&fit=crop&auto=format';
                }}
              />
            </div>
          ))}
        </div>

        {/* Parallax scrolling indicators - viewport window pattern */}
        {images.length > 1 && (
          <div
            style={{
              position: 'absolute',
              left: '50%',
              transform: 'translateX(-50%)',
              bottom: '8px',
              width: `${maxVisibleDots * 14}px`, // Fixed viewport window
              overflow: 'hidden',
            }}
          >
            {/* Container with all dots - moves inside viewport */}
            <div
              ref={dotsContainerRef}
              style={{
                display: 'flex',
                alignItems: 'center',
                gap: '6px',
                willChange: 'transform',
                transitionProperty: 'transform'
              }}
            >
              {images.map((_, i) => {
                const isActive = i === index;
                const isPassed = i < index;

                return (
                  <span
                    key={i}
                    style={{
                      width: isActive ? '8px' : '6px',
                      height: isActive ? '8px' : '6px',
                      backgroundColor: '#ffffff',
                      opacity: isPassed ? 0.8 : (isActive ? 1 : 0.5),
                      boxShadow: '0 1px 3px rgba(0,0,0,0.3)',
                      borderRadius: '50%',
                      flexShrink: 0,
                      transition: 'all 320ms cubic-bezier(0.25, 0.46, 0.45, 0.94)',
                    }}
                  />
                );
              })}
            </div>
          </div>
        )}

        {/* Favorite button */}
        <button
          onClick={handleFavoriteClick}
          onPointerDown={(e) => e.stopPropagation()}
          onPointerMove={(e) => e.stopPropagation()}
          onPointerUp={(e) => e.stopPropagation()}
          disabled={isFavoriteLoading}
          style={{
            position: 'absolute',
            top: '8px',
            right: '8px',
            width: '36px',
            height: '36px',
            borderRadius: '50%',
            backgroundColor: 'rgba(255, 255, 255, 0.9)',
            border: 'none',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            cursor: isFavoriteLoading ? 'not-allowed' : 'pointer',
            boxShadow: '0 2px 8px rgba(0,0,0,0.15)',
            opacity: isFavoriteLoading ? 0.6 : 1,
            transition: 'transform 0.15s, opacity 0.15s'
          }}
          onMouseEnter={(e) => {
            if (!isFavoriteLoading) {
              e.currentTarget.style.transform = 'scale(1.1)';
            }
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.transform = 'scale(1)';
          }}
        >
          <Heart
            size={20}
            fill={isFavorite ? '#ef4444' : 'transparent'}
            stroke={isFavorite ? '#ef4444' : '#6b7280'}
            strokeWidth={2}
            style={{
              transition: 'all 0.2s'
            }}
          />
        </button>
      </div>

      {/* Meta */}
      <div style={{ padding: '8px 12px', display: 'flex', flexDirection: 'column', justifyContent: 'space-between', alignItems: 'center', textAlign: 'center', minHeight: '110px' }}>
        <div style={{ display: 'flex', flexDirection: 'column', gap: '4px', alignItems: 'center' }}>
          {brand && <span className="text-xs font-medium" style={{ color: 'var(--muted)' }}>{brand}</span>}
          <h3 className="line-clamp-2" style={{ fontSize: '14px', fontWeight: 400, color: 'var(--text)', lineHeight: '1.5', margin: 0 }}>
            {title}
          </h3>
        </div>
        <span style={{ fontSize: '20px', fontWeight: 700, color: 'var(--text)' }}>{formatCurrency(price)}</span>
      </div>
    </article>
  );
};

export default ProductCard;
